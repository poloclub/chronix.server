buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:3.1.1'
    }
}

apply plugin: 'de.undercouch.download'

sourceSets {
    intTest {
        groovy.srcDir 'src/inttest/groovy'
        resources.srcDir 'src/inttest/resources'
    }
}
configurations {
    intTestCompile.extendsFrom(testCompile)
    intTestRuntime.extendsFrom(testRuntime)
}

dependencies {
    testCompile project(':chronix-server-query-handler')
    testCompile project(':chronix-server-ingestion-handler')
    testCompile project(':chronix-server-compaction-handler')
    testCompile project(':chronix-server-retention')
    testCompile project(':chronix-server-type-metric')
    testCompile project(':chronix-server-function-metric')
    testCompile project(':chronix-server-plugin-management')
}

import de.undercouch.gradle.tasks.download.Download

def solrVersion = "6.4.2"

//Apache archive
//"http://archive.apache.org/dist/lucene/solr/${solrVersion}/solr-${solrVersion}.zip"
task downloadZipFile(type: Download) {
    onlyIfNewer true
    src "http://archive.apache.org/dist/lucene/solr/${solrVersion}/solr-${solrVersion}.zip"
    dest new File(buildDir, "solr-${solrVersion}.zip")
}

task downloadAndUnzipFile(dependsOn: downloadZipFile, type: Copy) {
    from zipTree(downloadZipFile.dest)
    into buildDir
}
task copyCoreToSolr(dependsOn: downloadAndUnzipFile, type: Copy) {
    into "$buildDir/solr-${solrVersion}/server/solr"
    from "$projectDir/src/inttest/resources/de/qaware/chronix/solr"
}
/**
 * Enable CORS per default otherwise Grafana won't work.
 */
task copyWEBXMLToSolr(dependsOn: copyCoreToSolr, type: Copy) {
    into "$buildDir/solr-${solrVersion}/server/solr-webapp/webapp/WEB-INF/"
    from "$projectDir/src/inttest/resources/de/qaware/chronix/solr-webapp/webapp/WEB-INF/"
}
/**
 * Copy the modified contexts to activate gzip
 */
task copyContextsWithGZIP(dependsOn: copyWEBXMLToSolr, type: Copy) {
    into "$buildDir/solr-${solrVersion}/server/contexts/"
    from "$projectDir/src/inttest/resources/de/qaware/chronix/contexts/"
}
/**
 * Copy the related jetty ssl with the gzip stuff
 */
task copyJettySSL(dependsOn: copyContextsWithGZIP, type: Copy) {
    into "$buildDir/solr-${solrVersion}/server/etc/"
    from "$projectDir/src/inttest/resources/de/qaware/chronix/etc/"
}
/**
 * Copy some chronix icons
 */
task copyFavicon(dependsOn: copyJettySSL, type: Copy) {
    into "$buildDir/solr-${solrVersion}/server/solr-webapp/webapp/"
    from "$projectDir/src/inttest/resources/de/qaware/chronix/solr-webapp/webapp/"
    include("favicon.ico")
}

/**
 * Copy some chronix icons
 */
task copyChronixLogo(dependsOn: copyFavicon, type: Copy) {
    into "$buildDir/solr-${solrVersion}/server/solr-webapp/webapp/img/"
    from "$projectDir/src/inttest/resources/de/qaware/chronix/solr-webapp/webapp/img/"
}

/**
 * Copy some chronix icons
 */
task copyModifiedCSS(dependsOn: copyChronixLogo, type: Copy) {
    into "$buildDir/solr-${solrVersion}/server/solr-webapp/webapp/css/angular/"
    from "$projectDir/src/inttest/resources/de/qaware/chronix/solr-webapp/webapp/css/angular/"
}


task copyIntegrationRuntimeLibs(dependsOn: copyModifiedCSS, type: Copy) {
    from(configurations.testCompile + configurations.testRuntime)
    into "$buildDir/solr-${solrVersion}/server/solr/chronix/lib"
    include("*chronix-api*.jar")
    include("*chronix-timeseries*.jar")
    include("*chronix-server-query*.jar")
    include("*chronix-server-ingestion*.jar")
    include("*chronix-server-compaction*.jar")
    include("*chronix-server-retention*.jar")
    include("*chronix-server-plugin-management*.jar")
    include("*chronix-server-function-metric*.jar")
    include("*chronix-server-type-metric*.jar")
    include("*chronix.fastdtw-*.jar")
    include("*commons-lang3-*.jar")
    include("*commons-math3-*.jar")
    include("*quartz*.jar")
    include("*gson*.jar")
    include("*proto*.jar")
    include("*guice*.jar")
    include("*aopalliance*.jar")
    include("*javax.inject-1.jar")
    include("*jmotif-sax-*.jar")
}

/**
 * Helper task
 */
class ExecWait extends DefaultTask {
    String command
    String ready
    String directory

    @TaskAction
    def spawnProcess() {

        ProcessBuilder builder = new ProcessBuilder(command.split(' '))
        builder.redirectErrorStream(true)
        builder.directory(new File(directory))
        Process process = builder.start()

        InputStream stdout = process.getInputStream()
        BufferedReader reader = new BufferedReader(new InputStreamReader(stdout))

        def line
        while ((line = reader.readLine()) != null) {
            println line
            if (line.contains(ready)) {
                println "$command is ready"
                break
            }
        }
    }
}

/**
 * Tasks to start and stop solr
 */
String osName = System.getProperty("os.name").toLowerCase()
task startSolr(dependsOn: copyIntegrationRuntimeLibs, type: ExecWait) {
    if (osName.contains("windows")) {
        command 'cmd.exe /C solr.cmd start -m 512m -p 8913'
        ready "Started Solr server on port 8913. Happy searching!"
        directory "$buildDir/solr-${solrVersion}/bin/"
    } else {
        command 'bash solr start -m 512m -p 8913'
        ready "Started Solr server on port 8913. Happy searching!"
        directory "$buildDir/solr-${solrVersion}/bin/"
    }
}

task startSolrForeground(dependsOn: copyIntegrationRuntimeLibs, type: Exec) {
    commandLine 'bash', 'solr', 'start', '-m', '512m', '-p', '8913', '-f'
    workingDir "$buildDir/solr-${solrVersion}/bin/"
}


task stopSolr(type: ExecWait) {
    if (osName.contains("windows")) {
        command 'cmd.exe /C solr.cmd stop -p 8913'
        ready ""
        directory "$buildDir/solr-${solrVersion}/bin/"
    } else {
        command 'bash solr stop -p 8913'
        ready ""
        directory "$buildDir/solr-${solrVersion}/bin/"
    }
}


task intTest(dependsOn: copyIntegrationRuntimeLibs, type: Test) {
    //group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Runs the integration tests.'

    maxHeapSize = '512m'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath

    binResultsDir = file("$buildDir/integration-test-results/binary/inttest")

    reports {
        html.setDestination("$buildDir/reports/integration-test" as File)
        junitXml.setDestination("$buildDir/integration-test-results" as File)
    }
}

gradle.projectsEvaluated {
    def quickTasks = []

    gradle.rootProject.allprojects.each { project ->
        quickTasks.addAll(project.tasks.findAll { it.name == 'test' })
        quickTasks.addAll(project.tasks.withType(FindBugs))
        quickTasks.addAll(project.tasks.withType(Pmd))
    }

    quickTasks.each { task ->
        project.tasks.intTest.mustRunAfter task
    }
}

intTest.dependsOn startSolr

intTest.finalizedBy stopSolr